package db

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/caring/go-packages/pkg/errors"
	"github.com/caring/go-packages/pkg/uuid"

	"github.com/caring/{{.Name}}/api/pb"
)

{{$pascalDbModel := topascal .DBModel}}

// {{.DBModel}}Service provides an API for interacting with the {{toplural .DBModel}} table
type {{.DBModel}}Service struct {
	db    *sql.DB
	stmts map[string]*sql.Stmt
}

// {{$pascalDbModel}} is a struct representation of a row in the {{toplural .DBModel}} table
type {{$pascalDbModel}} struct {
	ID  	uuid.UUID
	Name  string
}

// proto{{$pascalDbModel}} is an interface that most proto {{.DBModel}} objects will satisfy
type proto{{$pascalDbModel}} interface {
	GetName() string
}

// New{{$pascalDbModel}} is a convenience helper cast a proto {{.DBModel}} to it's DB layer struct
func New{{$pascalDbModel}}(ID string, proto proto{{$pascalDbModel}}) (*{{$pascalDbModel}}, error) {
	mID, err := uuid.Parse(ID)
	if err != nil {
		return nil, err
	}

	return &{{$pascalDbModel}}{
		ID:  	mID,
		Name: proto.GetName(),
	}, nil
}

// ToProto casts a db {{.DBModel}} into a proto response object
func (m *{{$pascalDbModel}}) ToProto() *pb.{{$pascalDbModel}}Response {
	return &pb.{{$pascalDbModel}}Response{
		Id:  				m.ID.String(),
		Name:       m.Name,
	}
}

// Get fetches a single {{.DBModel}} from the db
func (svc *{{.DBModel}}Service) Get(ctx context.Context, ID uuid.UUID) (*{{$pascalDbModel}}, error) {
	return svc.get(ctx, false, ID)
}

// GetTx fetches a single {{.DBModel}} from the db inside of a tx from ctx
func (svc *{{.DBModel}}Service) GetTx(ctx context.Context, ID uuid.UUID) (*{{$pascalDbModel}}, error) {
	return svc.get(ctx, true, ID)
}

// get fetches a single {{.DBModel}} from the db
func (svc *{{.DBModel}}Service) get(ctx context.Context, useTx bool, ID uuid.UUID) (*{{$pascalDbModel}}, error) {
	errMsg := func() string { return "Error executing get {{.DBModel}} - " + fmt.Sprint(ID) }

	var (
		stmt *sql.Stmt
		err  error
		tx   *sql.Tx
	)

	if useTx {

		if tx, err = FromCtx(ctx); err != nil {
			return nil, err
		}

		stmt = tx.Stmt(svc.stmts["get-{{.DBModel}}"])
	} else {
		stmt = svc.stmts["get-{{.DBModel}}"]
	}

	p := {{$pascalDbModel}}{}

	err = stmt.QueryRowContext(ctx, ID).
		Scan(&p.ID, &p.Name)
	if err != nil {

		if errors.Is(err, sql.ErrNoRows) {
			return nil, errors.Wrap(ErrNotFound, errMsg())
		}

		return nil, errors.Wrap(err, errMsg())
	}

	return &p, nil
}

// Create a new {{.DBModel}}
func (svc *{{.DBModel}}Service) Create(ctx context.Context, input *{{$pascalDbModel}}) error {
	return svc.create(ctx, false, input)
}

// CreateTx creates a new {{.DBModel}} withing a tx from ctx
func (svc *{{.DBModel}}Service) CreateTx(ctx context.Context, input *{{$pascalDbModel}}) error {
	return svc.create(ctx, true, input)
}

// create a new {{.DBModel}}. if useTx = true then it will attempt to create the {{.DBModel}} within a transaction
// from context.
func (svc *{{.DBModel}}Service) create(ctx context.Context, useTx bool, input *{{$pascalDbModel}}) error {
	errMsg := func() string { return "Error executing create {{.DBModel}} - " + fmt.Sprint(input) }

	var (
		stmt *sql.Stmt
		err  error
		tx   *sql.Tx
	)

	if useTx {

		if tx, err = FromCtx(ctx); err != nil {
			return err
		}

		stmt = tx.Stmt(svc.stmts["create-{{.DBModel}}"])
	} else {
		stmt = svc.stmts["create-{{.DBModel}}"]
	}

	result, err := stmt.ExecContext(ctx, input.ID, input.Name)
	if err != nil {
		return errors.Wrap(err, errMsg())
	}

	rowCount, err := result.RowsAffected()
	if err != nil {
		return errors.Wrap(err, errMsg())
	}

	if rowCount == 0 {
		return errors.Wrap(ErrNotCreated, errMsg())
	}

	return nil
}

// Update updates a single {{.DBModel}} row in the DB
func (svc *{{.DBModel}}Service) Update(ctx context.Context, input *{{$pascalDbModel}}) error {
	return svc.update(ctx, false, input)
}

// UpdateTx updates a single {{.DBModel}} row in the DB within a tx from ctx
func (svc *{{.DBModel}}Service) UpdateTx(ctx context.Context, input *{{$pascalDbModel}}) error {
	return svc.update(ctx, true, input)
}

// update a {{.DBModel}}. if useTx = true then it will attempt to update the {{.DBModel}} within a transaction
// from context.
func (svc *{{.DBModel}}Service) update(ctx context.Context, useTx bool, input *{{$pascalDbModel}}) error {
	errMsg := func() string { return "Error executing update {{.DBModel}} - " + fmt.Sprint(input) }

	var (
		stmt *sql.Stmt
		err  error
		tx   *sql.Tx
	)

	if useTx {

		if tx, err = FromCtx(ctx); err != nil {
			return err
		}

		stmt = tx.Stmt(svc.stmts["update-{{.DBModel}}"])
	} else {
		stmt = svc.stmts["update-{{.DBModel}}"]
	}

	result, err := stmt.ExecContext(ctx, input.Name, input.ID)
	if err != nil {
		return errors.Wrap(err, errMsg())
	}

	rowCount, err := result.RowsAffected()
	if err != nil {
		return errors.Wrap(err, errMsg())
	}

	if rowCount == 0 {
		return errors.Wrap(ErrNoRowsAffected, errMsg())
	}

	return nil
}

// Delete sets deleted_at for a single {{toplural .DBModel}} row
func (svc *{{.DBModel}}Service) Delete(ctx context.Context, ID uuid.UUID) error {
	return svc.delete(ctx, false, ID)
}

// DeleteTx sets deleted_at for a single {{toplural .DBModel}} row within a tx from ctx
func (svc *{{.DBModel}}Service) DeleteTx(ctx context.Context, ID uuid.UUID) error {
	return svc.delete(ctx, true, ID)
}

// delete a {{.DBModel}} by setting deleted at. if useTx = true then it will attempt to delete the {{.DBModel}} within a transaction
// from context.
func (svc *{{.DBModel}}Service) delete(ctx context.Context, useTx bool, ID uuid.UUID) error {
	errMsg := func() string { return "Error executing delete {{.DBModel}} - " + ID.String() }

	var (
		stmt *sql.Stmt
		err  error
		tx   *sql.Tx
	)

	if useTx {

		if tx, err = FromCtx(ctx); err != nil {
			return err
		}

		stmt = tx.Stmt(svc.stmts["delete-{{.DBModel}}"])
	} else {
		stmt = svc.stmts["delete-{{.DBModel}}"]
	}

	result, err := stmt.ExecContext(ctx, ID)
	if err != nil {
		return errors.Wrap(err, errMsg())
	}

	rowCount, err := result.RowsAffected()
	if err != nil {
		return errors.Wrap(err, errMsg())
	}

	if rowCount == 0 {
		return errors.Wrap(ErrNotFound, errMsg())
	}

	return nil
}

