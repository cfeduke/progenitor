package handlers

import (
    "context"
    "github.com/caring/go-packages/pkg/errors"  
	"github.com/caring/go-packages/pkg/uuid"

    {{if .UseDB}}
	"github.com/caring/{{.Name}}/api/pb"
	"github.com/caring/{{.Name}}/internal/db"
	"github.com/caring/{{.Name}}/internal/domain/{{.Name}}"
    {{end}}

	"google.golang.org/grpc/codes"
)

type {{topascal .Name}} struct {
    Store {{Name}}.Store
}

func (tmpl {{topascal .Name}}) Create(ctx context.Context, in *pb.Create{{topascal .Name}}Request) (*pb.{{topascal .Name}}Response, error) {
	id, err := uuid.NewRandom()
    if err != nil {
		return nil, errors.WithGrpcStatus(err, codes.Internal)
	}

    {{tocamel .Name}}, err := {{tolower .Name}}.New{{topascal .Name}}(id.String(), in)
	if err != nil {
		return nil, errors.WithGrpcStatus(err, codes.InvalidArgument)
	}
    err = tmpl.Store.Create(ctx, nil, {{tocamel .Name}})
	if err != nil {
		if errors.Is(err, db.ErrDuplicate) {
			return nil, errors.WithGrpcStatus(err, codes.AlreadyExists)
		}
		return nil, errors.WithGrpcStatus(err, codes.Internal)
	}

    created{{topascal .Name}}, err := pn.Store.Get(ctx, nil, id)
	if err != nil {
		return nil, errors.WithGrpcStatus(err, codes.Internal)
	}

    return created{{topascal .Name}}.Proto()
}

func (tmpl {{topascal .Name}}) Update(ctx context.Context, in *pb.Update{{topascal .Name}}Request) (*pb.{{topascal .Name}}Response, error) {
    ID, err := uuid.Parse(req.Id)
	if err != nil {
		return nil, err
	}

	_, err = tmpl.Store.Get(ctx, nil, ID)
	if err != nil {
		if errors.Is(err, db.ErrNotFound) {
			return nil, errors.WithGrpcStatus(err, codes.NotFound)
		}
		return nil, errors.WithGrpcStatus(err, codes.Internal)
	}

	{{tocamel .Name}}, err := {{tolower .Name}}.New{{topascal .Name}}(ID.String(), req)
	if err != nil {
		return nil, errors.WithGrpcStatus(err, codes.InvalidArgument)
	}
	err = tmpl.Store.Update(ctx, nil, {{tocamel .Name}})
	if err != nil {
		return nil, errors.WithGrpcStatus(err, codes.Internal)
	}

	updated{{topascal .Name}}, err := tmpl.Store.Get(ctx, nil, ID)
	if err != nil {
		if errors.Is(err, db.ErrNotFound) {
			return nil, errors.WithGrpcStatus(err, codes.NotFound)
		}
		return nil, errors.WithGrpcStatus(err, codes.Internal)
	}

	return updated{{topascal .Name}}.Proto(), nil
}

func (tmpl {{topascal .Name}}) Delete(ctx context.Context, in *pb.ByUUIDRequest) (*pb.{{topascal .Name}}Response, error) {
    ID, err := uuid.Parse(req.GetId())
	if err != nil {
		return nil, errors.WithGrpcStatus(err, codes.InvalidArgument)
	}

	{{tocamel .Name}}, err := tmpl.Store.Get(ctx, nil, ID)
	if err != nil {
		if errors.Is(err, db.ErrNotFound) {
			return nil, errors.WithGrpcStatus(err, codes.NotFound)
		}
		return nil, errors.WithGrpcStatus(err, codes.Internal)
	}

	err = tmpl.Store.Delete(ctx, nil, ID)
	if err != nil {
		if errors.Is(err, db.ErrNotFound) {
			return nil, errors.WithGrpcStatus(err, codes.NotFound)
		}
		return nil, errors.WithGrpcStatus(err, codes.Internal)
	}
	{{tocamel .Name}}.Deleted = true
	return {{tocamel .Name}}.Proto(), nil
}

func (tmpl {{topascal .Name}}) Get(ctx context.Context, in *pb.ByUUIDRequest) (*pb.{{topascal .Name}}Response, error) {
    id, err := uuid.Parse(in.GetId())
	if err != nil {
		return nil, errors.WithGrpcStatus(err, codes.InvalidArgument)
	}

	{{tocamel .Name}}, err := tmpl.Store.Get(ctx, nil, id)
	if err != nil {
		if errors.Is(err, db.ErrNotFound) {
			return nil, errors.WithGrpcStatus(err, codes.NotFound)
		}
		return nil, errors.WithGrpcStatus(err, codes.Internal)
	}
	resp, err := {{tocamel .Name}}.Proto()
	if err != nil {
		return nil, err
	}

	return resp, nil
}
