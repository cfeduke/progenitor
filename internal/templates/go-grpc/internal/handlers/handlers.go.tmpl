package handlers

{{$lowerName := tolower .Name}}
{{$pascalName := topascal .Name}}
{{$camelName := tocamel .Name}}


import (
    "context"
    "github.com/caring/go-packages/pkg/errors"  
	"github.com/caring/go-packages/pkg/uuid"

    {{if .UseDB}}
	"github.com/caring/{{$lowerName}}/api/pb"
	"github.com/caring/{{$lowerName}}/internal/db"
	"github.com/caring/{{$lowerName}}/internal/domain/{{$lowerName}}"
    {{end}}

	"google.golang.org/grpc/codes"
)

type {{$pascalName}} struct {
    Store {{$lowerName}}.Store
}

func (tmpl {{$pascalName}}) Create(ctx context.Context, req *pb.Create{{$pascalName}}Request) (*pb.{{$pascalName}}Response, error) {
	id, err := uuid.NewRandom()
    if err != nil {
		return nil, errors.WithGrpcStatus(err, codes.Internal)
	}

    {{$camelName}}, err := {{tolower .Name}}.New{{$pascalName}}(id.String(), in)
	if err != nil {
		return nil, errors.WithGrpcStatus(err, codes.InvalidArgument)
	}
    err = tmpl.Store.Create(ctx, nil, {{$camelName}})
	if err != nil {
		if errors.Is(err, db.ErrDuplicate) {
			return nil, errors.WithGrpcStatus(err, codes.AlreadyExists)
		}
		return nil, errors.WithGrpcStatus(err, codes.Internal)
	}

    created{{$pascalName}}, err := pn.Store.Get(ctx, nil, id)
	if err != nil {
		return nil, errors.WithGrpcStatus(err, codes.Internal)
	}

    return created{{$pascalName}}.Proto()
}

func (tmpl {{$pascalName}}) Update(ctx context.Context, req *pb.Update{{$pascalName}}Request) (*pb.{{$pascalName}}Response, error) {
    ID, err := uuid.Parse(req.Id)
	if err != nil {
		return nil, err
	}

	_, err = tmpl.Store.Get(ctx, nil, ID)
	if err != nil {
		if errors.Is(err, db.ErrNotFound) {
			return nil, errors.WithGrpcStatus(err, codes.NotFound)
		}
		return nil, errors.WithGrpcStatus(err, codes.Internal)
	}

	{{$camelName}}, err := {{tolower .Name}}.New{{$pascalName}}(ID.String(), req)
	if err != nil {
		return nil, errors.WithGrpcStatus(err, codes.InvalidArgument)
	}
	err = tmpl.Store.Update(ctx, nil, {{$camelName}})
	if err != nil {
		return nil, errors.WithGrpcStatus(err, codes.Internal)
	}

	updated{{$pascalName}}, err := tmpl.Store.Get(ctx, nil, ID)
	if err != nil {
		if errors.Is(err, db.ErrNotFound) {
			return nil, errors.WithGrpcStatus(err, codes.NotFound)
		}
		return nil, errors.WithGrpcStatus(err, codes.Internal)
	}

	return updated{{$pascalName}}.Proto(), nil
}

func (tmpl {{$pascalName}}) Delete(ctx context.Context, req *pb.ByUUIDRequest) (*pb.{{$pascalName}}Response, error) {
    ID, err := uuid.Parse(req.GetId())
	if err != nil {
		return nil, errors.WithGrpcStatus(err, codes.InvalidArgument)
	}

	{{$camelName}}, err := tmpl.Store.Get(ctx, nil, ID)
	if err != nil {
		if errors.Is(err, db.ErrNotFound) {
			return nil, errors.WithGrpcStatus(err, codes.NotFound)
		}
		return nil, errors.WithGrpcStatus(err, codes.Internal)
	}

	err = tmpl.Store.Delete(ctx, nil, ID)
	if err != nil {
		if errors.Is(err, db.ErrNotFound) {
			return nil, errors.WithGrpcStatus(err, codes.NotFound)
		}
		return nil, errors.WithGrpcStatus(err, codes.Internal)
	}
	{{$camelName}}.Deleted = true
	return {{$camelName}}.Proto(), nil
}

func (tmpl {{$pascalName}}) Get(ctx context.Context, req *pb.ByUUIDRequest) (*pb.{{$pascalName}}Response, error) {
    id, err := uuid.Parse(in.GetId())
	if err != nil {
		return nil, errors.WithGrpcStatus(err, codes.InvalidArgument)
	}

	{{$camelName}}, err := tmpl.Store.Get(ctx, nil, id)
	if err != nil {
		if errors.Is(err, db.ErrNotFound) {
			return nil, errors.WithGrpcStatus(err, codes.NotFound)
		}
		return nil, errors.WithGrpcStatus(err, codes.Internal)
	}
	resp, err := {{$camelName}}.Proto()
	if err != nil {
		return nil, err
	}

	return resp, nil
}
