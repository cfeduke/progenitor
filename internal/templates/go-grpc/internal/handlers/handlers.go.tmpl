package handlers

{{$lowerDBModel := tolower .DBModel}}
{{$pascalDBModel := topascal .DBModel}}
{{$camelDBModel := tocamel .DBModel}}
{{$lowerName := tolower .Name}}


import (
    "context"
    "github.com/caring/go-packages/pkg/errors"  
	"github.com/caring/go-packages/pkg/uuid"
    {{if .UseDB}}
	"github.com/caring/{{$lowerName}}/api/pb"
	"github.com/caring/{{$lowerName}}/internal/db"
	"github.com/caring/{{$lowerName}}/internal/domain/{{$lowerDBModel}}"
    {{end}}
	"google.golang.org/grpc/codes"
)

type {{$pascalDBModel}} struct {
    Store {{$lowerDBModel}}.Store
}

func (tmpl {{$pascalDBModel}}) Create(ctx context.Context, req *pb.Create{{$pascalDBModel}}Request) (*pb.{{$pascalDBModel}}Response, error) {
	id, err := uuid.NewRandom()
    if err != nil {
		return nil, errors.WithGrpcStatus(err, codes.Internal)
	}

    {{$camelDBModel}}, err := {{$lowerDBModel}}.New{{$pascalDBModel}}(id.String(), req)
	if err != nil {
		return nil, errors.WithGrpcStatus(err, codes.InvalidArgument)
	}
    err = tmpl.Store.Create(ctx, nil, {{$camelDBModel}})
	if err != nil {
		if errors.Is(err, db.ErrDuplicate) {
			return nil, errors.WithGrpcStatus(err, codes.AlreadyExists)
		}
		return nil, errors.WithGrpcStatus(err, codes.Internal)
	}

    created{{$pascalDBModel}}, err := tmpl.Store.Get(ctx, nil, id)
	if err != nil {
		return nil, errors.WithGrpcStatus(err, codes.Internal)
	}

    return created{{$pascalDBModel}}.Proto(), nil
}

func (tmpl {{$pascalDBModel}}) Update(ctx context.Context, req *pb.Update{{$pascalDBModel}}Request) (*pb.{{$pascalDBModel}}Response, error) {
    ID, err := uuid.Parse(req.Id)
	if err != nil {
		return nil, err
	}

	_, err = tmpl.Store.Get(ctx, nil, ID)
	if err != nil {
		if errors.Is(err, db.ErrNotFound) {
			return nil, errors.WithGrpcStatus(err, codes.NotFound)
		}
		return nil, errors.WithGrpcStatus(err, codes.Internal)
	}

	{{$camelDBModel}}, err := {{$lowerDBModel}}.New{{$pascalDBModel}}(ID.String(), req)
	if err != nil {
		return nil, errors.WithGrpcStatus(err, codes.InvalidArgument)
	}
	err = tmpl.Store.Update(ctx, nil, {{$camelDBModel}})
	if err != nil {
		return nil, errors.WithGrpcStatus(err, codes.Internal)
	}

	updated{{$pascalDBModel}}, err := tmpl.Store.Get(ctx, nil, ID)
	if err != nil {
		if errors.Is(err, db.ErrNotFound) {
			return nil, errors.WithGrpcStatus(err, codes.NotFound)
		}
		return nil, errors.WithGrpcStatus(err, codes.Internal)
	}

	return updated{{$pascalDBModel}}.Proto(), nil
}

func (tmpl {{$pascalDBModel}}) Delete(ctx context.Context, req *pb.ByUUIDRequest) (*pb.{{$pascalDBModel}}Response, error) {
    ID, err := uuid.Parse(req.GetId())
	if err != nil {
		return nil, errors.WithGrpcStatus(err, codes.InvalidArgument)
	}

	{{$camelDBModel}}, err := tmpl.Store.Get(ctx, nil, ID)
	if err != nil {
		if errors.Is(err, db.ErrNotFound) {
			return nil, errors.WithGrpcStatus(err, codes.NotFound)
		}
		return nil, errors.WithGrpcStatus(err, codes.Internal)
	}

	err = tmpl.Store.Delete(ctx, nil, ID)
	if err != nil {
		if errors.Is(err, db.ErrNotFound) {
			return nil, errors.WithGrpcStatus(err, codes.NotFound)
		}
		return nil, errors.WithGrpcStatus(err, codes.Internal)
	}
	{{$camelDBModel}}.Deleted = true
	return {{$camelDBModel}}.Proto(), nil
}

func (tmpl {{$pascalDBModel}}) Get(ctx context.Context, req *pb.ByUUIDRequest) (*pb.{{$pascalDBModel}}Response, error) {
    id, err := uuid.Parse(req.GetId())
	if err != nil {
		return nil, errors.WithGrpcStatus(err, codes.InvalidArgument)
	}

	{{$camelDBModel}}, err := tmpl.Store.Get(ctx, nil, id)
	if err != nil {
		if errors.Is(err, db.ErrNotFound) {
			return nil, errors.WithGrpcStatus(err, codes.NotFound)
		}
		return nil, errors.WithGrpcStatus(err, codes.Internal)
	}

	return {{$camelDBModel}}.Proto(), nil
}
