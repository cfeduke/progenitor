package service

import (
  "context"
  "fmt"{{if .UseDB}}
  "time"

  "github.com/caring/{{.Name}}/internal/db"{{end}}
  "github.com/caring/{{.Name}}/internal/handlers"
  "github.com/caring/{{.Name}}/api/pb"
  "github.com/caring/go-packages/pkg/errors"
  "github.com/caring/go-packages/pkg/logging"
  "google.golang.org/grpc/codes"
)

type {{topascal .Name}}Service struct {
  {{if .UseDB}}Store *db.Store{{end}}
  Log   *logging.Logger
  pb.Unimplemented{{topascal .Name}}ServiceServer
}

func (s *{{topascal .Name}}Service) Ping(ctx context.Context, in *pb.PingRequest) (*pb.PingResponse, error) {
    s.Log.Debug(fmt.Sprintf("Received: %v", in.Data))
    resp := "Data: " + in.Data
    {{if .UseDB}}
    ctx, cancel := context.WithTimeout(ctx, 1*time.Second)
    defer cancel()
    status := "up"
    if err := s.Store.Ping(ctx); err != nil {
      status = "down"
    }
    return &pb.PingResponse{Data: resp + "; Database: " + status}, nil
    {{else}}
    return &pb.PingResponse{Data: resp}, nil
    {{end}}
}

// prevents handler import error on defaultbuild
func (s *{{topascal .Name}}Service)  Unimplemented() (interface{}, error) {
  return handlers.UnimplementedResponse()
}

func (s *{{topascal .Name}}Service)  Create{{topascal .DBModel}}(ctx context.Context, in *pb.Create{{topascal .DBModel}}Request) (*pb.{{topascal .DBModel}}Response, error) {
  return nil, errors.WithGrpcStatus(errors.New("endpoint unimplemented"), codes.Unimplemented)
}

func (s *{{topascal .Name}}Service)  Update{{topascal .DBModel}}(ctx context.Context, in *pb.Update{{topascal .DBModel}}Request) (*pb.{{topascal .DBModel}}Response, error) {
  return nil, errors.WithGrpcStatus(errors.New("endpoint unimplemented"), codes.Unimplemented)
}

func (s *{{topascal .Name}}Service)  Delete{{topascal .DBModel}}(ctx context.Context, in *pb.ByUUIDRequest) (*pb.{{topascal .DBModel}}Response, error) {
  return nil, errors.WithGrpcStatus(errors.New("endpoint unimplemented"), codes.Unimplemented)
}

func (s *{{topascal .Name}}Service)  Get{{topascal .DBModel}}(ctx context.Context, in *pb.ByUUIDRequest) (*pb.{{topascal .DBModel}}Response, error) {
  return nil, errors.WithGrpcStatus(errors.New("endpoint unimplemented"), codes.Unimplemented)
}