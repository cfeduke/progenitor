package service

{{$lowerName := tolower .Name}}
{{$pascalDBModel := topascal .DBModel}}

import (
  "context"
  "fmt"
  "time"

  _ "google.golang.org/grpc/codes"

  "github.com/caring/go-packages/v2/pkg/logging"
  "github.com/caring/{{$lowerName}}/api/pb"
  "github.com/caring/{{$lowerName}}/internal/handlers"
)

type Service struct {
  pb.Unimplemented{{$pascalDBModel}}ServiceServer
  {{$pascalDBModel}} *handlers.{{$pascalDBModel}}
  Logger   logging.Logging
}

{{if .UseDB}}func (s *Service) Ping(ctx context.Context, in *pb.PingRequest) (*pb.PingResponse, error) {
    s.Logger.Debug(fmt.Sprintf("Received: %v", in.Data))
    resp := "Data: " + in.Data
    ctx, cancel := context.WithTimeout(ctx, 1*time.Second)
    defer cancel()
    return &pb.PingResponse{Data: resp}, nil
}{{end}}

func (s *Service)  Create{{$pascalDBModel}}(ctx context.Context, in *pb.Create{{$pascalDBModel}}Request) (*pb.{{$pascalDBModel}}Response, error) {
  s.Logger.Debug("Create{{$pascalDBModel}}: " + in.String())
	return s.{{$pascalDBModel}}.Create(ctx, in)
}

func (s *Service)  Update{{$pascalDBModel}}(ctx context.Context, in *pb.Update{{$pascalDBModel}}Request) (*pb.{{$pascalDBModel}}Response, error) {
  s.Logger.Debug("Update{{$pascalDBModel}}: " + in.String())
  return s.{{$pascalDBModel}}.Update(ctx, in)
}

func (s *Service)  Delete{{$pascalDBModel}}(ctx context.Context, in *pb.ByUUIDRequest) (*pb.{{$pascalDBModel}}Response, error) {
  s.Logger.Debug("Delete{{$pascalDBModel}}: " + in.String())
  return s.{{$pascalDBModel}}.Delete(ctx, in)
}

func (s *Service)  Get{{$pascalDBModel}}(ctx context.Context, in *pb.ByUUIDRequest) (*pb.{{$pascalDBModel}}Response, error) {
  s.Logger.Debug("Get{{$pascalDBModel}}: " + in.String())
  return s.{{$pascalDBModel}}.Get(ctx, in)
}