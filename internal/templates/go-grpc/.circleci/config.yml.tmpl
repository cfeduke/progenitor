# References
# https://circleci.com/docs/2.0/env-vars/#built-in-environment-variables
# https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands
# https://circleci.com/docs/2.0/workflows/#holding-a-workflow-for-a-manual-approval
# https://circleci.com/docs/2.0/workflows/#branch-level-job-execution

version: 2.1
orbs:
  go: circleci/go@1.1.1
  aws-cli: circleci/aws-cli@1.0.0

commands:
  build_image:
    description: "Builds a Docker image and tags it with the commit SHA1 hash or commit tag"
    parameters:
      aws_account_id:
        type: env_var_name
        default: CARING_DEV_ACCOUNT_ID
      tag:
        type: string
        default: ${CIRCLE_SHA1}
    steps:
      - checkout
      - run:
          name: Setup Environment Variables
          command: |
            echo 'export FULL_IMAGE_NAME="${<< parameters.aws_account_id >>}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:<< parameters.tag >>"' >> $BASH_ENV
      - run:
          name: Build Docker Image
          command: |
            docker build -f Dockerfile -t $FULL_IMAGE_NAME --build-arg=DOCKER_GIT_CREDENTIALS=$DOCKER_GIT_CREDENTIALS .
  push_image:
    description: "Pushes a Docker image to a specified ECR repository"
    parameters:
      image:
        type: env_var_name
        default: FULL_IMAGE_NAME
      role_arn:
        type: env_var_name
        default: CARING_DEV_ARN
      aws_account_id:
        type: env_var_name
        default: CARING_DEV_ACCOUNT_ID
      aws_region:
        type: env_var_name
        default: AWS_DEFAULT_REGION
      aws_access_key_id:
        type: env_var_name
        default: AWS_ACCESS_KEY_ID
      aws_secret_access_key:
        type: env_var_name
        default: AWS_SECRET_ACCESS_KEY
    steps:
      - aws-cli/install:
          skip-install-check: true
          version: "2"
      - aws-cli/setup:
          profile-name: caring
          aws-region: << parameters.aws_region >>
          aws-access-key-id: << parameters.aws_access_key_id >>
          aws-secret-access-key: << parameters.aws_secret_access_key >>
      - run:
          name: Push Docker Image & Update Service
          command: |
            unset AWS_SESSION_TOKEN
            TEMP_ROLE=$(aws sts assume-role --role-arn "${<< parameters.role_arn >>}" --role-session-name "docker" --profile caring)
            export AWS_ACCESS_KEY_ID=$(echo $TEMP_ROLE | jq .Credentials.AccessKeyId | xargs)
            export AWS_SECRET_ACCESS_KEY=$(echo $TEMP_ROLE | jq .Credentials.SecretAccessKey | xargs)
            export AWS_SESSION_TOKEN=$(echo $TEMP_ROLE | jq .Credentials.SessionToken | xargs)
            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${<< parameters.aws_account_id >>}.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPOSITORY_NAME
            docker push $FULL_IMAGE_NAME
            export CLUSTER="arn:aws:ecs:${<< parameters.aws_region >>}:${<< parameters.aws_account_id >>}:cluster/main"
            export SERVICE="arn:aws:ecs:${<< parameters.aws_region >>}:${<< parameters.aws_account_id >>}:service/main/ecs-{{.Name}}"
            aws ecs update-service --cluster $CLUSTER --service $SERVICE --force-new-deployment | cat

jobs:
  test:
    executor:
      name: go/default
      tag: '1.14'
    environment:
      GOPRIVATE: "github.com/caring"
      DOCKER_GIT_CREDENTIALS: $DOCKER_GIT_CREDENTIALS
      TEST_RESULTS: /tmp/test-results
    steps:
      - checkout
      - run: mkdir -p $TEST_RESULTS
      - go/load-cache
      - go/mod-download
      - go/save-cache
      - run: go get gotest.tools/gotestsum
      - run: gotestsum --format standard-verbose --junitfile $TEST_RESULTS/results.xml
      - store_test_results:
          path: /tmp/test-results

  deploy_to_dev:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    steps:
      - build_image:
          aws_account_id: CARING_DEV_ACCOUNT_ID
          tag: ${CIRCLE_SHA1}
      - push_image:
          image: FULL_IMAGE_NAME
          aws_account_id: CARING_DEV_ACCOUNT_ID
          role_arn: CARING_DEV_ARN
          aws_region: AWS_DEFAULT_REGION
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY

  deploy_to_stg:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    steps:
      - build_image:
          aws_account_id: CARING_STG_ACCOUNT_ID
          tag: ${CIRCLE_SHA1}
      - push_image:
          image: FULL_IMAGE_NAME
          aws_account_id: CARING_STG_ACCOUNT_ID
          role_arn: CARING_STG_ARN
          aws_region: AWS_DEFAULT_REGION
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY

  deploy_to_prod:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    steps:
      - build_image:
          aws_account_id: CARING_PROD_ACCOUNT_ID
          tag: ${CIRCLE_TAG}
      - push_image:
          image: FULL_IMAGE_NAME
          aws_account_id: CARING_PROD_ACCOUNT_ID
          role_arn: CARING_PROD_ARN
          aws_region: AWS_DEFAULT_REGION
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY

  build:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    steps:
      - build_image:
          aws_account_id: CARING_STG_ACCOUNT_ID
          tag: ${CIRCLE_SHA1}
      - push_image:
          image: FULL_IMAGE_NAME
          aws_account_id: CARING_STG_ACCOUNT_ID
          role_arn: CARING_STG_ARN
          aws_region: AWS_DEFAULT_REGION
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY

workflows:
  dev_deploy:
    jobs:
      - test:
          filters:
            branches:
              only: /^[A-Z]+\-[0-9]+$/
      - deploy_to_dev:
          requires:
            - test
  stg_deploy:
    jobs:
      - test:
          filters:
            branches:
              only: main
            tags:
              ignore: /.*/
      - deploy_to_stg:
          requires:
            - test
  prod_deploy:
    jobs:
      - test:
          filters:
            branches:
              only: main
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+$/
      - hold:
          type: approval
          requires:
            - test
      - deploy_to_prod:
          requires:
            - hold
